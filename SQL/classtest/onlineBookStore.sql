-- Write SQL queries to perform the following tasks:
--     a. Retrieve a list of all books along with their authors.
--     b. Add a new book to the database with the following details: Title - "The Great Gatsby", Author - "F. Scott Fitzgerald", Genre - "Fiction", Price - $10.99, Quantity - 50.
--     c. Retrieve the top 5 best-selling books based on the total number of orders.

create database onlineBookStore;
use onlineBookstore;

CREATE TABLE author (
    author_id INT PRIMARY KEY,
    author_name VARCHAR(100)
);

CREATE TABLE book (
    book_id INT PRIMARY KEY,
    book_name VARCHAR(100),
    book_author_id INT,
    genre VARCHAR(50),
    price DECIMAL(10, 2),
    quantity INT
);

CREATE TABLE publisher (
    publisher_id INT PRIMARY KEY,
    publisher_name VARCHAR(50)
);

CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    book_id INT,
    date_in TIMESTAMP,
    date_out TIMESTAMP,
    status VARCHAR(50)
);

CREATE TABLE borrower (
    borrower_id INT PRIMARY KEY,
    borrower_name VARCHAR(50),
    address TEXT,
    phonenumber INT
);


INSERT INTO author (author_id, author_name) VALUES
(1, 'Rahul Jain'),
(2, 'Meena Patil'),
(3, 'Raj Pawar'),
(4, 'Jonny'),
(5, 'Ronny'),
(6, 'Monny'),
(7, 'Tonny'),
(8, 'Honey'),
(9, 'Konny'),
(10, 'Aonny');


INSERT INTO book (book_id, book_name, book_author_id, genre, price, quantity) VALUES
(1, 'Rich Dad Poor Dad', 8, 'Fiction', 10.99, 50),
(2, 'Monday', 5, 'Romance', 12.50, 30),
(3, 'Tuesday', 6, 'arts', 9.99, 40),
(4, 'Wednesday', 9, 'Science Fiction', 11.99, 35),
(5, 'thrusday', 7, 'Fiction', 15.99, 25),
(6, 'friday', 4, 'Fiction', 10.99, 50),
(7, 'saturday', 5, 'Romance', 13.99, 20),
(8, 'sunday', 6, 'war', 8.99, 45),
(9, 'The last war', 10, 'Fiction', 11.50, 30),
(10, 'The Rocket', 11, 'Fantasy', 14.99, 40); 


INSERT INTO transactions (transaction_id, book_id, date_in, date_out, status) VALUES
(1, 1, '2024-01-01 08:00:00', '2023-01-02 08:00:00', 'InCompleted'),
(2, 2, '2024-01-02 09:00:00', '2023-01-03 09:00:00', 'Completed'),
(3, 3, '2024-01-03 10:00:00', '2023-01-04 10:00:00', 'Completed'),
(4, 4, '2024-01-04 11:00:00', '2023-01-05 11:00:00', 'Completed'),
(5, 5, '2024-01-05 12:00:00', '2023-01-06 12:00:00', 'InCompleted'),
(6, 6, '2024-01-06 13:00:00', '2023-01-07 13:00:00', 'Completed'),
(7, 7, '2024-01-07 14:00:00', '2023-01-08 14:00:00', 'Completed'),
(8, 8, '2024-01-08 15:00:00', '2023-01-09 15:00:00', 'InCompleted'),
(9, 9, '2024-01-09 16:00:00', '2023-01-10 16:00:00', 'Completed'),
(10, 10, '2024-01-10 17:00:00', '2023-01-11 17:00:00', 'Completed');



SELECT b.book_name AS Book_Title, a.author_name AS Author
FROM book b
INNER JOIN author a ON b.book_author_id = a.author_id;

INSERT INTO book (book_id, book_name, book_author_id, genre, price, quantity)
VALUES (11, 'The Great Gatsby', 12, 'Fiction', 10.99, 50);

SELECT b.book_name AS Book_Title, COUNT(t.transaction_id) AS Total_Orders
FROM book b
LEFT JOIN transactions t ON b.book_id = t.book_id
GROUP BY b.book_id
ORDER BY Total_Orders DESC
LIMIT 5;


-- Implement a stored procedure that calculates the total revenue generated by the bookstore for a given month and year. 
-- The procedure should accept input parameters for the month and year and return the total revenue as output.

DELIMITER //
CREATE PROCEDURE TotalRevenue (IN p_month INT, IN p_year INT, OUT total_revenue DECIMAL(10, 2))
BEGIN
    SELECT SUM(b.price * t.quantity) INTO total_revenue
    FROM book b
    INNER JOIN transactions t ON b.book_id = t.book_id
    WHERE MONTH(t.date_out) = p_month AND YEAR(t.date_out) = p_year AND t.status = 'Completed';
END//
DELIMITER ;

-- Design and create a view that displays customer information along with the total amount spent by each customer on purchases.
